// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: time_server.proto

#include "time_server.pb.h"
#include "time_server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char *TimeServer_method_names[] = {
        "/TimeServer/GetTime",
};

std::unique_ptr<TimeServer::Stub>
TimeServer::NewStub(const std::shared_ptr<::grpc::ChannelInterface> &channel, const ::grpc::StubOptions &options) {
    (void) options;
    std::unique_ptr<TimeServer::Stub> stub(new TimeServer::Stub(channel, options));
    return stub;
}

TimeServer::Stub::Stub(const std::shared_ptr<::grpc::ChannelInterface> &channel, const ::grpc::StubOptions &options)
        : channel_(channel), rpcmethod_GetTime_(TimeServer_method_names[0], options.suffix_for_stats(),
                                                ::grpc::internal::RpcMethod::NORMAL_RPC, channel) {}

::grpc::Status
TimeServer::Stub::GetTime(::grpc::ClientContext *context, const ::GetTimeRequest &request, ::Timespec *response) {
    return ::grpc::internal::BlockingUnaryCall<::GetTimeRequest, ::Timespec, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
            channel_.get(), rpcmethod_GetTime_, context, request, response);
}

void
TimeServer::Stub::async::GetTime(::grpc::ClientContext *context, const ::GetTimeRequest *request, ::Timespec *response,
                                 std::function<void(::grpc::Status)> f) {
    ::grpc::internal::CallbackUnaryCall<::GetTimeRequest, ::Timespec, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
            stub_->channel_.get(), stub_->rpcmethod_GetTime_, context, request, response, std::move(f));
}

void
TimeServer::Stub::async::GetTime(::grpc::ClientContext *context, const ::GetTimeRequest *request, ::Timespec *response,
                                 ::grpc::ClientUnaryReactor *reactor) {
    ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
            stub_->channel_.get(), stub_->rpcmethod_GetTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader<::Timespec> *
TimeServer::Stub::PrepareAsyncGetTimeRaw(::grpc::ClientContext *context, const ::GetTimeRequest &request,
                                         ::grpc::CompletionQueue *cq) {
    return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::Timespec, ::GetTimeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
            channel_.get(), cq, rpcmethod_GetTime_, context, request);
}

::grpc::ClientAsyncResponseReader<::Timespec> *
TimeServer::Stub::AsyncGetTimeRaw(::grpc::ClientContext *context, const ::GetTimeRequest &request,
                                  ::grpc::CompletionQueue *cq) {
    auto *result =
            this->PrepareAsyncGetTimeRaw(context, request, cq);
    result->StartCall();
    return result;
}

TimeServer::Service::Service() {
    AddMethod(new ::grpc::internal::RpcServiceMethod(
            TimeServer_method_names[0],
            ::grpc::internal::RpcMethod::NORMAL_RPC,
            new ::grpc::internal::RpcMethodHandler<TimeServer::Service, ::GetTimeRequest, ::Timespec, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                    [](TimeServer::Service *service,
                       ::grpc::ServerContext *ctx,
                       const ::GetTimeRequest *req,
                       ::Timespec *resp) {
                        return service->GetTime(ctx, req, resp);
                    }, this)));
}

TimeServer::Service::~Service() {
}

::grpc::Status
TimeServer::Service::GetTime(::grpc::ServerContext *context, const ::GetTimeRequest *request, ::Timespec *response) {
    (void) context;
    (void) request;
    (void) response;
    return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


