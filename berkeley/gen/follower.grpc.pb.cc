// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: follower.proto

#include "follower.pb.h"
#include "follower.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Follower_method_names[] = {
  "/Follower/GetTime",
  "/Follower/SetTime",
};

std::unique_ptr< Follower::Stub> Follower::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Follower::Stub> stub(new Follower::Stub(channel, options));
  return stub;
}

Follower::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetTime_(Follower_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTime_(Follower_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Follower::Stub::GetTime(::grpc::ClientContext* context, const ::GetTimeRequest& request, ::Timespec* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetTimeRequest, ::Timespec, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTime_, context, request, response);
}

void Follower::Stub::async::GetTime(::grpc::ClientContext* context, const ::GetTimeRequest* request, ::Timespec* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetTimeRequest, ::Timespec, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTime_, context, request, response, std::move(f));
}

void Follower::Stub::async::GetTime(::grpc::ClientContext* context, const ::GetTimeRequest* request, ::Timespec* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Timespec>* Follower::Stub::PrepareAsyncGetTimeRaw(::grpc::ClientContext* context, const ::GetTimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Timespec, ::GetTimeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Timespec>* Follower::Stub::AsyncGetTimeRaw(::grpc::ClientContext* context, const ::GetTimeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Follower::Stub::SetTime(::grpc::ClientContext* context, const ::SetTimeRequest& request, ::SetTimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SetTimeRequest, ::SetTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTime_, context, request, response);
}

void Follower::Stub::async::SetTime(::grpc::ClientContext* context, const ::SetTimeRequest* request, ::SetTimeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SetTimeRequest, ::SetTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTime_, context, request, response, std::move(f));
}

void Follower::Stub::async::SetTime(::grpc::ClientContext* context, const ::SetTimeRequest* request, ::SetTimeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SetTimeResponse>* Follower::Stub::PrepareAsyncSetTimeRaw(::grpc::ClientContext* context, const ::SetTimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SetTimeResponse, ::SetTimeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SetTimeResponse>* Follower::Stub::AsyncSetTimeRaw(::grpc::ClientContext* context, const ::SetTimeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

Follower::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Follower_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Follower::Service, ::GetTimeRequest, ::Timespec, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Follower::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetTimeRequest* req,
             ::Timespec* resp) {
               return service->GetTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Follower_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Follower::Service, ::SetTimeRequest, ::SetTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Follower::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SetTimeRequest* req,
             ::SetTimeResponse* resp) {
               return service->SetTime(ctx, req, resp);
             }, this)));
}

Follower::Service::~Service() {
}

::grpc::Status Follower::Service::GetTime(::grpc::ServerContext* context, const ::GetTimeRequest* request, ::Timespec* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Follower::Service::SetTime(::grpc::ServerContext* context, const ::SetTimeRequest* request, ::SetTimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


