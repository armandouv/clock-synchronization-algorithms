// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: follower.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_follower_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_follower_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_follower_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_follower_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_follower_2eproto;
class GetTimeRequest;
struct GetTimeRequestDefaultTypeInternal;
extern GetTimeRequestDefaultTypeInternal _GetTimeRequest_default_instance_;
class SetTimeRequest;
struct SetTimeRequestDefaultTypeInternal;
extern SetTimeRequestDefaultTypeInternal _SetTimeRequest_default_instance_;
class SetTimeResponse;
struct SetTimeResponseDefaultTypeInternal;
extern SetTimeResponseDefaultTypeInternal _SetTimeResponse_default_instance_;
class Timespec;
struct TimespecDefaultTypeInternal;
extern TimespecDefaultTypeInternal _Timespec_default_instance_;
class Timeval;
struct TimevalDefaultTypeInternal;
extern TimevalDefaultTypeInternal _Timeval_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GetTimeRequest* Arena::CreateMaybeMessage<::GetTimeRequest>(Arena*);
template<> ::SetTimeRequest* Arena::CreateMaybeMessage<::SetTimeRequest>(Arena*);
template<> ::SetTimeResponse* Arena::CreateMaybeMessage<::SetTimeResponse>(Arena*);
template<> ::Timespec* Arena::CreateMaybeMessage<::Timespec>(Arena*);
template<> ::Timeval* Arena::CreateMaybeMessage<::Timeval>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class GetTimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:GetTimeRequest) */ {
 public:
  inline GetTimeRequest() : GetTimeRequest(nullptr) {}
  explicit constexpr GetTimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTimeRequest(const GetTimeRequest& from);
  GetTimeRequest(GetTimeRequest&& from) noexcept
    : GetTimeRequest() {
    *this = ::std::move(from);
  }

  inline GetTimeRequest& operator=(const GetTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTimeRequest& operator=(GetTimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTimeRequest* internal_default_instance() {
    return reinterpret_cast<const GetTimeRequest*>(
               &_GetTimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetTimeRequest& a, GetTimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTimeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetTimeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetTimeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetTimeRequest";
  }
  protected:
  explicit GetTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GetTimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_follower_2eproto;
};
// -------------------------------------------------------------------

class SetTimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SetTimeResponse) */ {
 public:
  inline SetTimeResponse() : SetTimeResponse(nullptr) {}
  explicit constexpr SetTimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTimeResponse(const SetTimeResponse& from);
  SetTimeResponse(SetTimeResponse&& from) noexcept
    : SetTimeResponse() {
    *this = ::std::move(from);
  }

  inline SetTimeResponse& operator=(const SetTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTimeResponse& operator=(SetTimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTimeResponse* internal_default_instance() {
    return reinterpret_cast<const SetTimeResponse*>(
               &_SetTimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetTimeResponse& a, SetTimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTimeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetTimeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetTimeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetTimeResponse";
  }
  protected:
  explicit SetTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SetTimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_follower_2eproto;
};
// -------------------------------------------------------------------

class SetTimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetTimeRequest) */ {
 public:
  inline SetTimeRequest() : SetTimeRequest(nullptr) {}
  ~SetTimeRequest() override;
  explicit constexpr SetTimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTimeRequest(const SetTimeRequest& from);
  SetTimeRequest(SetTimeRequest&& from) noexcept
    : SetTimeRequest() {
    *this = ::std::move(from);
  }

  inline SetTimeRequest& operator=(const SetTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTimeRequest& operator=(SetTimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTimeRequest* internal_default_instance() {
    return reinterpret_cast<const SetTimeRequest*>(
               &_SetTimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetTimeRequest& a, SetTimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTimeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetTimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetTimeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTimeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetTimeRequest";
  }
  protected:
  explicit SetTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeltaFieldNumber = 1,
    kOldDeltaFieldNumber = 2,
  };
  // .Timeval delta = 1;
  bool has_delta() const;
  private:
  bool _internal_has_delta() const;
  public:
  void clear_delta();
  const ::Timeval& delta() const;
  PROTOBUF_NODISCARD ::Timeval* release_delta();
  ::Timeval* mutable_delta();
  void set_allocated_delta(::Timeval* delta);
  private:
  const ::Timeval& _internal_delta() const;
  ::Timeval* _internal_mutable_delta();
  public:
  void unsafe_arena_set_allocated_delta(
      ::Timeval* delta);
  ::Timeval* unsafe_arena_release_delta();

  // .Timeval oldDelta = 2;
  bool has_olddelta() const;
  private:
  bool _internal_has_olddelta() const;
  public:
  void clear_olddelta();
  const ::Timeval& olddelta() const;
  PROTOBUF_NODISCARD ::Timeval* release_olddelta();
  ::Timeval* mutable_olddelta();
  void set_allocated_olddelta(::Timeval* olddelta);
  private:
  const ::Timeval& _internal_olddelta() const;
  ::Timeval* _internal_mutable_olddelta();
  public:
  void unsafe_arena_set_allocated_olddelta(
      ::Timeval* olddelta);
  ::Timeval* unsafe_arena_release_olddelta();

  // @@protoc_insertion_point(class_scope:SetTimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Timeval* delta_;
  ::Timeval* olddelta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_follower_2eproto;
};
// -------------------------------------------------------------------

class Timeval final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Timeval) */ {
 public:
  inline Timeval() : Timeval(nullptr) {}
  ~Timeval() override;
  explicit constexpr Timeval(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Timeval(const Timeval& from);
  Timeval(Timeval&& from) noexcept
    : Timeval() {
    *this = ::std::move(from);
  }

  inline Timeval& operator=(const Timeval& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timeval& operator=(Timeval&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Timeval& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timeval* internal_default_instance() {
    return reinterpret_cast<const Timeval*>(
               &_Timeval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Timeval& a, Timeval& b) {
    a.Swap(&b);
  }
  inline void Swap(Timeval* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timeval* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Timeval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Timeval>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Timeval& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Timeval& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timeval* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Timeval";
  }
  protected:
  explicit Timeval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kMicrosecondsFieldNumber = 2,
  };
  // int64 seconds = 1;
  void clear_seconds();
  int64_t seconds() const;
  void set_seconds(int64_t value);
  private:
  int64_t _internal_seconds() const;
  void _internal_set_seconds(int64_t value);
  public:

  // int64 microseconds = 2;
  void clear_microseconds();
  int64_t microseconds() const;
  void set_microseconds(int64_t value);
  private:
  int64_t _internal_microseconds() const;
  void _internal_set_microseconds(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Timeval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t seconds_;
  int64_t microseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_follower_2eproto;
};
// -------------------------------------------------------------------

class Timespec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Timespec) */ {
 public:
  inline Timespec() : Timespec(nullptr) {}
  ~Timespec() override;
  explicit constexpr Timespec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Timespec(const Timespec& from);
  Timespec(Timespec&& from) noexcept
    : Timespec() {
    *this = ::std::move(from);
  }

  inline Timespec& operator=(const Timespec& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timespec& operator=(Timespec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Timespec& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timespec* internal_default_instance() {
    return reinterpret_cast<const Timespec*>(
               &_Timespec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Timespec& a, Timespec& b) {
    a.Swap(&b);
  }
  inline void Swap(Timespec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timespec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Timespec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Timespec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Timespec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Timespec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timespec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Timespec";
  }
  protected:
  explicit Timespec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosecondsFieldNumber = 2,
  };
  // int64 seconds = 1;
  void clear_seconds();
  int64_t seconds() const;
  void set_seconds(int64_t value);
  private:
  int64_t _internal_seconds() const;
  void _internal_set_seconds(int64_t value);
  public:

  // int64 nanoseconds = 2;
  void clear_nanoseconds();
  int64_t nanoseconds() const;
  void set_nanoseconds(int64_t value);
  private:
  int64_t _internal_nanoseconds() const;
  void _internal_set_nanoseconds(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Timespec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t seconds_;
  int64_t nanoseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_follower_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetTimeRequest

// -------------------------------------------------------------------

// SetTimeResponse

// -------------------------------------------------------------------

// SetTimeRequest

// .Timeval delta = 1;
inline bool SetTimeRequest::_internal_has_delta() const {
  return this != internal_default_instance() && delta_ != nullptr;
}
inline bool SetTimeRequest::has_delta() const {
  return _internal_has_delta();
}
inline void SetTimeRequest::clear_delta() {
  if (GetArenaForAllocation() == nullptr && delta_ != nullptr) {
    delete delta_;
  }
  delta_ = nullptr;
}
inline const ::Timeval& SetTimeRequest::_internal_delta() const {
  const ::Timeval* p = delta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Timeval&>(
      ::_Timeval_default_instance_);
}
inline const ::Timeval& SetTimeRequest::delta() const {
  // @@protoc_insertion_point(field_get:SetTimeRequest.delta)
  return _internal_delta();
}
inline void SetTimeRequest::unsafe_arena_set_allocated_delta(
    ::Timeval* delta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delta_);
  }
  delta_ = delta;
  if (delta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SetTimeRequest.delta)
}
inline ::Timeval* SetTimeRequest::release_delta() {
  
  ::Timeval* temp = delta_;
  delta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Timeval* SetTimeRequest::unsafe_arena_release_delta() {
  // @@protoc_insertion_point(field_release:SetTimeRequest.delta)
  
  ::Timeval* temp = delta_;
  delta_ = nullptr;
  return temp;
}
inline ::Timeval* SetTimeRequest::_internal_mutable_delta() {
  
  if (delta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Timeval>(GetArenaForAllocation());
    delta_ = p;
  }
  return delta_;
}
inline ::Timeval* SetTimeRequest::mutable_delta() {
  ::Timeval* _msg = _internal_mutable_delta();
  // @@protoc_insertion_point(field_mutable:SetTimeRequest.delta)
  return _msg;
}
inline void SetTimeRequest::set_allocated_delta(::Timeval* delta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete delta_;
  }
  if (delta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Timeval>::GetOwningArena(delta);
    if (message_arena != submessage_arena) {
      delta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delta, submessage_arena);
    }
    
  } else {
    
  }
  delta_ = delta;
  // @@protoc_insertion_point(field_set_allocated:SetTimeRequest.delta)
}

// .Timeval oldDelta = 2;
inline bool SetTimeRequest::_internal_has_olddelta() const {
  return this != internal_default_instance() && olddelta_ != nullptr;
}
inline bool SetTimeRequest::has_olddelta() const {
  return _internal_has_olddelta();
}
inline void SetTimeRequest::clear_olddelta() {
  if (GetArenaForAllocation() == nullptr && olddelta_ != nullptr) {
    delete olddelta_;
  }
  olddelta_ = nullptr;
}
inline const ::Timeval& SetTimeRequest::_internal_olddelta() const {
  const ::Timeval* p = olddelta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Timeval&>(
      ::_Timeval_default_instance_);
}
inline const ::Timeval& SetTimeRequest::olddelta() const {
  // @@protoc_insertion_point(field_get:SetTimeRequest.oldDelta)
  return _internal_olddelta();
}
inline void SetTimeRequest::unsafe_arena_set_allocated_olddelta(
    ::Timeval* olddelta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(olddelta_);
  }
  olddelta_ = olddelta;
  if (olddelta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SetTimeRequest.oldDelta)
}
inline ::Timeval* SetTimeRequest::release_olddelta() {
  
  ::Timeval* temp = olddelta_;
  olddelta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Timeval* SetTimeRequest::unsafe_arena_release_olddelta() {
  // @@protoc_insertion_point(field_release:SetTimeRequest.oldDelta)
  
  ::Timeval* temp = olddelta_;
  olddelta_ = nullptr;
  return temp;
}
inline ::Timeval* SetTimeRequest::_internal_mutable_olddelta() {
  
  if (olddelta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Timeval>(GetArenaForAllocation());
    olddelta_ = p;
  }
  return olddelta_;
}
inline ::Timeval* SetTimeRequest::mutable_olddelta() {
  ::Timeval* _msg = _internal_mutable_olddelta();
  // @@protoc_insertion_point(field_mutable:SetTimeRequest.oldDelta)
  return _msg;
}
inline void SetTimeRequest::set_allocated_olddelta(::Timeval* olddelta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete olddelta_;
  }
  if (olddelta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Timeval>::GetOwningArena(olddelta);
    if (message_arena != submessage_arena) {
      olddelta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, olddelta, submessage_arena);
    }
    
  } else {
    
  }
  olddelta_ = olddelta;
  // @@protoc_insertion_point(field_set_allocated:SetTimeRequest.oldDelta)
}

// -------------------------------------------------------------------

// Timeval

// int64 seconds = 1;
inline void Timeval::clear_seconds() {
  seconds_ = int64_t{0};
}
inline int64_t Timeval::_internal_seconds() const {
  return seconds_;
}
inline int64_t Timeval::seconds() const {
  // @@protoc_insertion_point(field_get:Timeval.seconds)
  return _internal_seconds();
}
inline void Timeval::_internal_set_seconds(int64_t value) {
  
  seconds_ = value;
}
inline void Timeval::set_seconds(int64_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:Timeval.seconds)
}

// int64 microseconds = 2;
inline void Timeval::clear_microseconds() {
  microseconds_ = int64_t{0};
}
inline int64_t Timeval::_internal_microseconds() const {
  return microseconds_;
}
inline int64_t Timeval::microseconds() const {
  // @@protoc_insertion_point(field_get:Timeval.microseconds)
  return _internal_microseconds();
}
inline void Timeval::_internal_set_microseconds(int64_t value) {
  
  microseconds_ = value;
}
inline void Timeval::set_microseconds(int64_t value) {
  _internal_set_microseconds(value);
  // @@protoc_insertion_point(field_set:Timeval.microseconds)
}

// -------------------------------------------------------------------

// Timespec

// int64 seconds = 1;
inline void Timespec::clear_seconds() {
  seconds_ = int64_t{0};
}
inline int64_t Timespec::_internal_seconds() const {
  return seconds_;
}
inline int64_t Timespec::seconds() const {
  // @@protoc_insertion_point(field_get:Timespec.seconds)
  return _internal_seconds();
}
inline void Timespec::_internal_set_seconds(int64_t value) {
  
  seconds_ = value;
}
inline void Timespec::set_seconds(int64_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:Timespec.seconds)
}

// int64 nanoseconds = 2;
inline void Timespec::clear_nanoseconds() {
  nanoseconds_ = int64_t{0};
}
inline int64_t Timespec::_internal_nanoseconds() const {
  return nanoseconds_;
}
inline int64_t Timespec::nanoseconds() const {
  // @@protoc_insertion_point(field_get:Timespec.nanoseconds)
  return _internal_nanoseconds();
}
inline void Timespec::_internal_set_nanoseconds(int64_t value) {
  
  nanoseconds_ = value;
}
inline void Timespec::set_nanoseconds(int64_t value) {
  _internal_set_nanoseconds(value);
  // @@protoc_insertion_point(field_set:Timespec.nanoseconds)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_follower_2eproto
